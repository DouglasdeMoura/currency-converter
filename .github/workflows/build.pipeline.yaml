name: Pipeline

on:
    workflow_dispatch:
    pull_request:
    push:
        paths-ignore:
            - "README.md"
            - "pre-commit-config.yaml"

concurrency:
    group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
    cancel-in-progress: true

env:
    docker_image_name: "currency_converter"
    docker_registry: "ghcr.io"
    python_version: 3.12
    poetry_version: 1.8.3
    poetry_home: "/opt/poetry"
    SECRET_KEY: "ci_secret_key"
    DEBUG: "True"

jobs:
    testing:
        env:
            DJANGO_SUPERUSER_PASSWORD: testeci1!
            DJANGO_SUPERUSER_USERNAME: ciuser
            DJANGO_SUPERUSER_EMAIL: ciuser@example.com
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{env.python_version}}

            - name: Install poetry ${{env.poetry_version}}
              shell: bash
              run: |
                  curl -sSL https://install.python-poetry.org | POETRY_HOME=${{env.poetry_home}} python3 - --version ${{env.poetry_version}}
                  export PATH="${{env.poetry_home}}/bin:$PATH"
                  poetry --version

            - name: Install test dependencies
              shell: bash
              run: |
                  export PATH="${{env.poetry_home}}/bin:$PATH"
                  poetry install --with tests

            - name: Run unit tests
              shell: bash
              run: |
                  export PATH="${{env.poetry_home}}/bin:$PATH"
                  poetry run task manage migrate
                  poetry run task manage createsuperuser --noinput
                  poetry run pytest tests/ --cov . --cov-report html

    linting:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{env.python_version}}

            - name: Install poetry ${{env.poetry_version}}
              shell: bash
              run: |
                  curl -sSL https://install.python-poetry.org | POETRY_HOME=${{env.poetry_home}} python3 - --version ${{env.poetry_version}}
                  export PATH="${{env.poetry_home}}/bin:$PATH"
                  poetry --version

            - name: Install ci dependencies
              shell: bash
              run: |
                  export PATH="${{env.poetry_home}}/bin:$PATH"
                  poetry install --only ci

            - name: Run ruff
              shell: bash
              continue-on-error: true
              run: |
                  export PATH="${{env.poetry_home}}/bin:$PATH"
                  poetry run ruff check .

            - name: Run black
              shell: bash
              continue-on-error: true
              run: |
                  export PATH="${{env.poetry_home}}/bin:$PATH"
                  poetry run black . --check

            - name: Run hadolint
              shell: bash
              continue-on-error: true
              run: |
                  docker pull hadolint/hadolint
                  docker run --rm -i hadolint/hadolint < Dockerfile

    containerization:
        runs-on: ubuntu-latest
        needs:
            - testing
            - linting
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Convert repository name to lowercase
              id: lowercase
              run: INPUT=${{ github.repository }}; echo "REPO=${INPUT,,}">>${GITHUB_OUTPUT}

            - name: Building image
              shell: bash
              run: |
                  docker build -t ${{ env.docker_image_name }} \
                    -t ${{ env.docker_registry }}/${{ steps.lowercase.outputs.REPO }}/${{ env.docker_image_name }}:latest .

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: ${{ env.docker_image_name }}
                  format: "sarif"
                  vuln-type: "library"
                  severity: "CRITICAL,HIGH"
                  output: "trivy-results.sarif"

            - name: Upload Trivy scan results
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: "trivy-results.sarif"

    deploy:
        name: Deploy app
        runs-on: ubuntu-latest
        concurrency: deploy-group # optional: ensure only one action runs at a time
        steps:
            - uses: actions/checkout@v4
            - uses: superfly/flyctl-actions/setup-flyctl@master
            - run: flyctl deploy --remote-only
              env:
                  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
